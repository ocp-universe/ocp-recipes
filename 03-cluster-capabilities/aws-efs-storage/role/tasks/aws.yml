---
# AWS

- name: AWS Creds
  block:
  - name: Retrieve credentials from Secret
    k8s_facts:
      api_version: v1
      kind: Secret
      name: "{{ secret_name }}"
      namespace: "{{ namespace }}"
    register: ctx

  - name: Set up ocp_recipe_operator combined dictionary
    set_fact:
      AWS_ACCESS_KEY: >-
        {{ ctx.resources[0].data.aws_access_key_id | b64decode }}
      AWS_SECRET_KEY: >-
        {{ ctx.resources[0].data.aws_secret_access_key | b64decode }}

  - name: Display AWS Key
    debug:
      msg: "{{ AWS_ACCESS_KEY }}"

- name: AWS VPC information
  block:
  # Gather information about all VPCs, matching the filter
  - name: Gather all VPC
    ec2_vpc_net_info:
      region: "{{ aws_region }}"
      filters:
        "vpc-id": "{{ aws_vpc_id_filter }}"
    register: vpc_info
    environment:
      AWS_ACCESS_KEY: "{{ AWS_ACCESS_KEY }}"
      AWS_SECRET_KEY: "{{ AWS_SECRET_KEY }}"

  - set_fact:
      vpc_ids: "{{ vpc_info.vpcs|map(attribute='vpc_id')|list }}"

  - name: Display VPCs
    debug:
      msg: "{{ item }}"
    loop:
      - "{{ vpc_ids }}"

- name: AWS VPC Subnet information
  block:
  # Gather information about all VPC subnets, matching the filter
  # in this case, only the internal/private subnets are relevant
  # Thru the OpenShift installation the private subnets contains the tag
  # kubernetes.io/role/internal-elb
  - name: Gather all subnets
    ec2_vpc_subnet_info:   
      region: "{{ aws_region }}"   
      filters:
        "tag-key": "kubernetes.io/role/internal-elb"
    register: vpc_subnet_info
    environment:
      AWS_ACCESS_KEY: "{{ AWS_ACCESS_KEY }}"
      AWS_SECRET_KEY: "{{ AWS_SECRET_KEY }}"

  - set_fact:
      vpc_subnet_ids: "{{ vpc_subnet_info.subnets|map(attribute='subnet_id')|list }}"

  - name: Display VPC subnets
    debug:
      msg: "{{ item }}"
    loop:
      - "{{ vpc_subnet_ids }}"

- name: AWS EFS configuration
  block:
  - name: Generate AWS Cloudformation
    template:
      src: ../templates/efs.cloudformation.yaml.j2
      dest: "{{ ocp_tmp_dir }}/efs.cloudformation.yaml"

  - name: Get AWS Cloudformation stack
    cloudformation_info:
      region: "{{ aws_region }}"   
      stack_name: "ocp-efs"
    register: cf_stack
    environment:
      AWS_ACCESS_KEY: "{{ AWS_ACCESS_KEY }}"
      AWS_SECRET_KEY: "{{ AWS_SECRET_KEY }}"

  - name: Debug AWS Cloudformation stack
    debug:
      msg: "{{ cf_stack }}"

  - name: Delete AWS Cloudformation stack if in failed state
    when: 
      - cf_stack.cloudformation["ocp-efs"] is defined
      - cf_stack.cloudformation["ocp-efs"].stack_description.stack_status == "CREATE_FAILED"
    cloudformation:
      region: "{{ aws_region }}"   
      stack_name: "ocp-efs"
      state: "absent"
    environment:
      AWS_ACCESS_KEY: "{{ AWS_ACCESS_KEY }}"
      AWS_SECRET_KEY: "{{ AWS_SECRET_KEY }}"

  - name: Create a cloudformation stack
    cloudformation:
      stack_name: "ocp-efs"
      state: "present"
      region: "{{ aws_regionÂ }}"
      # delete/rollback if failed
      #on_create_failure: DELETE
      disable_rollback: "{{ aws_cf_disable_rollback | default('true') }}"
      # create a changeset for an existing stack
      create_changeset: true
      template: "{{ ocp_tmp_dir }}/efs.cloudformation.yaml"
      template_parameters:
        EFSName: "OCPDynStorageWithEFS"
      tags:
        stack: "ocp-efs"
        name: "ocp-efs"
    register: cf_stack
    environment:
      AWS_ACCESS_KEY: "{{ AWS_ACCESS_KEY }}"
      AWS_SECRET_KEY: "{{ AWS_SECRET_KEY }}"

  - name: Debug AWS Cloudformation stack
    debug:
      msg: "{{ item }}" 
    loop:
      - "########### AWS Cloudformation result ###########"
      - "EFS FilesystemId: {{ cf_stack.stack_outputs.FileSystemId }}"
      - " "
      - "{{ cf_stack }}"
      - "########### ######################### ###########"

